<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\emvloopback.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\emvloopback.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed Dec 09 15:26:03 2015
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; lite_printf &rArr; private_printf &rArr; write_hex &rArr; write_num &rArr; write_long &rArr; __aeabi_uldivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a9]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[e]">handler_default_undefined_</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">handler_default_undefined_</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">AfeGetCardStatus</a> from max3255x_afe.o(.text) referenced from max3255x_afe.o(.constdata)
 <LI><a href="#[12]">AfeInterrupt_Handler</a> from max3255x_afe.o(.text) referenced from max3255x_afe.o(.text)
 <LI><a href="#[16]">AfePower</a> from max3255x_afe.o(.text) referenced from max3255x_afe.o(.constdata)
 <LI><a href="#[14]">AfeSelect</a> from max3255x_afe.o(.text) referenced from max3255x_afe.o(.constdata)
 <LI><a href="#[15]">AfeSetVoltage</a> from max3255x_afe.o(.text) referenced from max3255x_afe.o(.constdata)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_max3255x.o(.text) referenced 2 times from startup_max3255x.o(.data)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_max3255x.o(.text) referenced 2 times from startup_max3255x.o(.data)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_max3255x.o(.text) referenced 2 times from startup_max3255x.o(.data)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_max3255x.o(.text) referenced 2 times from startup_max3255x.o(.data)
 <LI><a href="#[5]">NMI_Handler</a> from startup_max3255x.o(.text) referenced 2 times from startup_max3255x.o(.data)
 <LI><a href="#[f]">OSWrapper_SC0Handler</a> from oswrapper.o(.text) referenced 2 times from oswrapper.o(.data)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_max3255x.o(.text) referenced 2 times from startup_max3255x.o(.data)
 <LI><a href="#[10]">Reset_Handler</a> from startup_max3255x.o(.text) referenced from startup_max3255x.o(.text)
 <LI><a href="#[a]">SVC_Handler</a> from startup_max3255x.o(.text) referenced 2 times from startup_max3255x.o(.data)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_max3255x.o(.text) referenced 2 times from startup_max3255x.o(.data)
 <LI><a href="#[4]">System_Reset</a> from startup_max3255x.o(.text) referenced 2 times from startup_max3255x.o(.data)
 <LI><a href="#[4]">System_Reset</a> from startup_max3255x.o(.text) referenced from startup_max3255x.o(RESET)
 <LI><a href="#[1b]">UartActivate</a> from max325xx_uart.o(.text) referenced from max325xx_uart.o(.constdata)
 <LI><a href="#[1e]">UartActiveWait</a> from max325xx_uart.o(.text) referenced from max325xx_uart.o(.constdata)
 <LI><a href="#[1d]">UartGetRxLen</a> from max325xx_uart.o(.text) referenced from max325xx_uart.o(.constdata)
 <LI><a href="#[13]">UartInterrupt_Handler</a> from max325xx_uart.o(.text) referenced from max325xx_uart.o(.text)
 <LI><a href="#[1f]">UartIoctl</a> from max325xx_uart.o(.text) referenced from max325xx_uart.o(.constdata)
 <LI><a href="#[18]">UartOnCardStateChanged</a> from max325xx_uart.o(.text) referenced from max325xx_uart.o(.constdata)
 <LI><a href="#[19]">UartReceive</a> from max325xx_uart.o(.text) referenced from max325xx_uart.o(.constdata)
 <LI><a href="#[1a]">UartSend</a> from max325xx_uart.o(.text) referenced from max325xx_uart.o(.constdata)
 <LI><a href="#[1c]">UartStop</a> from max325xx_uart.o(.text) referenced from max325xx_uart.o(.constdata)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_max3255x.o(.text) referenced 2 times from startup_max3255x.o(.data)
 <LI><a href="#[20]">__main</a> from __main.o(!!!main) referenced from startup_max3255x.o(.text)
 <LI><a href="#[e]">handler_default_undefined_</a> from startup_max3255x.o(.text) referenced 96 times from startup_max3255x.o(.data)
 <LI><a href="#[e]">handler_default_undefined_</a> from startup_max3255x.o(.text) referenced from mml_intc.o(.text)
 <LI><a href="#[29]">main</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[3f]">write_char</a> from printf_lite.o(.text) referenced from printf_lite.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[21]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[23]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ac]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ad]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[ae]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[27]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[be]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[c8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[c9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[22]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ca]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[24]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[cb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[28]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; lite_printf &rArr; private_printf &rArr; write_hex &rArr; write_num &rArr; write_long &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[cc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[aa]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[cd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[29]"></a>main</STRONG> (Thumb, 612 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = main &rArr; lite_printf &rArr; private_printf &rArr; write_hex &rArr; write_num &rArr; write_long &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_set_system_divider
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_write_bit_pattern
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_printf
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_read
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_open
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_ioctl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_close
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>Delay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, private.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay &rArr; mml_get_system_frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_get_system_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>System_Reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_max3255x.o(RESET)
<LI> startup_max3255x.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3255x.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3255x.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3255x.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3255x.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3255x.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3255x.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3255x.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3255x.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3255x.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3255x.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>handler_default_undefined_</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3255x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_default_undefined_
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_default_undefined_
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_max3255x.o(.data)
<LI> mml_intc.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_max3255x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3d]"></a>uart_write_char</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, printf_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_write_char &rArr; mml_uart_write_char
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_write_char
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_char
</UL>

<P><STRONG><a name="[3f]"></a>write_char</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, printf_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_char &rArr; uart_write_char &rArr; mml_uart_write_char
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_char
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;private_printf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_long
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf_lite.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>write_long</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, printf_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = write_long &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_char
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_num
</UL>

<P><STRONG><a name="[42]"></a>write_num</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = write_num &rArr; write_long &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_long
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dec
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hex
</UL>

<P><STRONG><a name="[43]"></a>write_hex</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, printf_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = write_hex &rArr; write_num &rArr; write_long &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_num
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;private_printf
</UL>

<P><STRONG><a name="[44]"></a>write_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, printf_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_string &rArr; write_char &rArr; uart_write_char &rArr; mml_uart_write_char
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_char
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;private_printf
</UL>

<P><STRONG><a name="[46]"></a>check_string</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, printf_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_string
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;private_printf
</UL>

<P><STRONG><a name="[47]"></a>cvt</STRONG> (Thumb, 94 bytes, Stack size 100 bytes, printf_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cvt
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;private_printf
</UL>

<P><STRONG><a name="[45]"></a>private_printf</STRONG> (Thumb, 982 bytes, Stack size 152 bytes, printf_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = private_printf &rArr; write_hex &rArr; write_num &rArr; write_long &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_string
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hex
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_char
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_printf
</UL>

<P><STRONG><a name="[35]"></a>lite_printf</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, printf_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lite_printf &rArr; private_printf &rArr; write_hex &rArr; write_num &rArr; write_long &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;private_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>write_dec</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, printf_lite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_num
</UL>

<P><STRONG><a name="[4c]"></a>mml_gcr_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mml_gcr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_reset_system
</UL>

<P><STRONG><a name="[ce]"></a>mml_gcr_dev_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mml_gcr.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>mml_gcr_set_sysfreq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mml_gcr.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>mml_gcr_get_sysfreq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mml_gcr.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>mml_set_system_divider</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mml_gcr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mml_set_system_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>mml_get_system_frequency</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mml_gcr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mml_get_system_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_get_ahb_frequency
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[49]"></a>mml_get_ahb_frequency</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mml_gcr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_get_system_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_get_apb_frequency
</UL>

<P><STRONG><a name="[4a]"></a>mml_get_apb_frequency</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mml_gcr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_get_ahb_frequency
</UL>

<P><STRONG><a name="[4b]"></a>mml_reset_system</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, mml_gcr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gcr_reset
</UL>

<P><STRONG><a name="[d1]"></a>mml_gcr_flip_iflash</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mml_gcr.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>mml_gcr_unflip_iflash</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mml_gcr.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>mml_gpio_check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mml_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mml_gpio_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_read_bit_pattern
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_get_interrupt_status
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_clear_interrupt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_disable_interrupt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_enable_interrupt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_set_config
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_disable_output
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_pad_configure
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_configure_function
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_enable_output
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_write_bit_pattern
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_init
</UL>

<P><STRONG><a name="[4d]"></a>mml_gpio_enable_output</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, mml_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mml_gpio_enable_output &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_set_config
</UL>

<P><STRONG><a name="[4f]"></a>mml_gpio_configure_function</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mml_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mml_gpio_configure_function &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_set_config
</UL>

<P><STRONG><a name="[50]"></a>mml_gpio_pad_configure</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mml_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mml_gpio_pad_configure &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_set_config
</UL>

<P><STRONG><a name="[51]"></a>mml_gpio_disable_output</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, mml_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mml_gpio_disable_output &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_close
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_set_config
</UL>

<P><STRONG><a name="[53]"></a>mml_gpio_clear_out_int_wake</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mml_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mml_gpio_clear_out_int_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_close
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_set_config
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_init
</UL>

<P><STRONG><a name="[52]"></a>mml_gpio_set_config</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, mml_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mml_gpio_set_config &rArr; mml_gpio_pad_configure &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_clear_out_int_wake
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_disable_output
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_pad_configure
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_configure_function
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_enable_output
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_init
</UL>

<P><STRONG><a name="[31]"></a>mml_gpio_init</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, mml_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mml_gpio_init &rArr; mml_gpio_set_config &rArr; mml_gpio_pad_configure &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_set_config
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_clear_out_int_wake
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInit
</UL>

<P><STRONG><a name="[d3]"></a>mml_gpio_reset_interface</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mml_gpio.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>mml_gpio_close</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, mml_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_clear_out_int_wake
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_disable_output
</UL>

<P><STRONG><a name="[55]"></a>mml_gpio_enable_interrupt</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mml_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>

<P><STRONG><a name="[56]"></a>mml_gpio_disable_interrupt</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mml_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>

<P><STRONG><a name="[57]"></a>mml_gpio_clear_interrupt</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, mml_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>

<P><STRONG><a name="[58]"></a>mml_gpio_get_interrupt_status</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mml_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>

<P><STRONG><a name="[d4]"></a>mml_gpio_config_open_drain</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, mml_gpio.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>mml_gpio_write_dataout</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mml_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_write_buffer
</UL>

<P><STRONG><a name="[d5]"></a>mml_gpio_read_dataout</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mml_gpio.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>mml_gpio_read_datain</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mml_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_read_buffer
</UL>

<P><STRONG><a name="[59]"></a>mml_gpio_write_buffer</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, mml_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_write_dataout
</UL>

<P><STRONG><a name="[5b]"></a>mml_gpio_read_buffer</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, mml_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_read_datain
</UL>

<P><STRONG><a name="[32]"></a>mml_gpio_write_bit_pattern</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mml_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mml_gpio_write_bit_pattern &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfePower
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInit
</UL>

<P><STRONG><a name="[5d]"></a>mml_gpio_read_bit_pattern</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mml_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mml_gpio_read_bit_pattern &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_check
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeGetCardStatus
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfePower
</UL>

<P><STRONG><a name="[d6]"></a>mml_gpio_pin_output</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mml_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>mml_gpio_pin_input</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mml_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>mml_gpio_set_padsmode</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, mml_gpio.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>mml_intc_attach_irq</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mml_intc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mml_intc_attach_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_callback_handler_register
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_setup_irq
</UL>

<P><STRONG><a name="[67]"></a>mml_intc_detach_irq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mml_intc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_UnregisterIRQ
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_callback_handler_unregister
</UL>

<P><STRONG><a name="[60]"></a>mml_intc_enable_irq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mml_intc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mml_intc_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_interrupt_activate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_setup_irq
</UL>

<P><STRONG><a name="[69]"></a>mml_intc_disable_irq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mml_intc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_interrupt_activate
</UL>

<P><STRONG><a name="[6b]"></a>mml_intc_ack_irq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mml_intc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mml_intc_ack_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_SC0Handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_interrupt_ack
</UL>

<P><STRONG><a name="[5e]"></a>mml_intc_setup_irq</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, mml_intc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mml_intc_setup_irq &rArr; mml_intc_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_enable_irq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_attach_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_RegisterIRQ
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_set_config
</UL>

<P><STRONG><a name="[62]"></a>mml_uart_flush_raw</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, mml_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mml_uart_flush_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_deinit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_flush
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_init
</UL>

<P><STRONG><a name="[61]"></a>mml_uart_set_config</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, mml_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mml_uart_set_config &rArr; mml_intc_setup_irq &rArr; mml_intc_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_setup_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_init
</UL>

<P><STRONG><a name="[30]"></a>mml_uart_init</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, mml_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mml_uart_init &rArr; mml_uart_set_config &rArr; mml_intc_setup_irq &rArr; mml_intc_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_set_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_flush_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>mml_uart_reset_interface</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mml_uart.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>mml_uart_read_char</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mml_uart.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>mml_uart_write_char</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mml_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mml_uart_write_char
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_char
</UL>

<P><STRONG><a name="[63]"></a>mml_uart_flush</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, mml_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_flush_raw
</UL>

<P><STRONG><a name="[db]"></a>mml_uart_port_status</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, mml_uart.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>mml_uart_deinit</STRONG> (Thumb, 174 bytes, Stack size 28 bytes, mml_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_uart_flush_raw
</UL>

<P><STRONG><a name="[65]"></a>mml_uart_callback_handler_register</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mml_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_attach_irq
</UL>

<P><STRONG><a name="[66]"></a>mml_uart_callback_handler_unregister</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mml_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_detach_irq
</UL>

<P><STRONG><a name="[68]"></a>mml_uart_interrupt_activate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mml_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_disable_irq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_enable_irq
</UL>

<P><STRONG><a name="[dc]"></a>mml_uart_interrupt_clear</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mml_uart.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>mml_uart_interrupt_set</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, mml_uart.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>mml_uart_interrupt_ack</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mml_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_ack_irq
</UL>

<P><STRONG><a name="[de]"></a>mml_uart_initialise</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, mml_uart.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>mml_uart_read_byte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mml_uart.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>mml_uart_write_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mml_uart.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>GetATR</STRONG> (Thumb, 2098 bytes, Stack size 104 bytes, atr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetATR &rArr; IccPTSNegotiate &rArr; IccSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccStartActivation
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSlotGetConfiguration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRxDone
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPTSNegotiate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccGetRxLen
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccDeactivate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccCheckCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccActivate
</UL>

<P><STRONG><a name="[74]"></a>SetDefaultConfig</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetDefaultConfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRegisterAfe
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPowerAfe
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPowerOff
</UL>

<P><STRONG><a name="[9c]"></a>IccWait</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IccWait
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfePower
</UL>

<P><STRONG><a name="[71]"></a>IccGetRxLen</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IccGetRxLen
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPTSNegotiate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccDeactivate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetATR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveBlock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetProcByte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetMoreRxBytes
</UL>

<P><STRONG><a name="[6e]"></a>IccCheckCardState</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IccCheckCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPTSNegotiate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccDeactivate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetATR
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_write
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_ioctl
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActivate
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActiveWait
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveBlock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetProcByte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetMoreRxBytes
</UL>

<P><STRONG><a name="[70]"></a>IccDeactivate</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IccDeactivate &rArr; IccGetRxLen
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccGetRxLen
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccCheckCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT0
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPowerAfe
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetATR
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case2
</UL>

<P><STRONG><a name="[6f]"></a>IccStartActivation</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IccStartActivation
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetATR
</UL>

<P><STRONG><a name="[8a]"></a>IccSend</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IccSend
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPTSNegotiate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSBlock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRBlock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIBlock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case2
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0TransmitHeader
</UL>

<P><STRONG><a name="[8c]"></a>IccReceive</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IccReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPTSNegotiate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveBlock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetProcByte
</UL>

<P><STRONG><a name="[72]"></a>IccRxDone</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IccRxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPTSNegotiate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetATR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveBlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case2
</UL>

<P><STRONG><a name="[9a]"></a>IccSetAfeVoltage</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IccSetAfeVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_ioctl
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActivate
</UL>

<P><STRONG><a name="[76]"></a>IccPowerOff</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IccPowerOff &rArr; SetDefaultConfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInterrupt_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartStop
</UL>

<P><STRONG><a name="[77]"></a>IccPowerAfe</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IccPowerAfe &rArr; IccDeactivate &rArr; IccGetRxLen
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_ioctl
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActivate
</UL>

<P><STRONG><a name="[9d]"></a>IccOnCardStateChange</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IccOnCardStateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInterrupt_Handler
</UL>

<P><STRONG><a name="[78]"></a>IccUartRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IccUartRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_RegisterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[7a]"></a>IccRegisterAfe</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IccRegisterAfe &rArr; SetDefaultConfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_getUARTbyId
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_getSlotbyId
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_getSlotCtxbyId
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_RegisterSlot
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInit
</UL>

<P><STRONG><a name="[7f]"></a>IccExchange</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = IccExchange &rArr; SendT0 &rArr; T0Case3 &rArr; T0GetMoreRxBytes &rArr; IccGetRxLen
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT0
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_memdestroy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_getSlotCtxbyId
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_write
</UL>

<P><STRONG><a name="[83]"></a>IccActivate</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, iccabstract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IccActivate &rArr; GetATR &rArr; IccPTSNegotiate &rArr; IccSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_getSlotCtxbyId
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetATR
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_ioctl
</UL>

<P><STRONG><a name="[85]"></a>udelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, oswrapper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
</UL>

<P><STRONG><a name="[f]"></a>OSWrapper_SC0Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, oswrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSWrapper_SC0Handler &rArr; mml_intc_ack_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_ack_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oswrapper.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>OSWrapper_Map</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oswrapper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[84]"></a>OSWrapper_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, oswrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIoctl
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActivate
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInterrupt_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReceive
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartStop
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetETU
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetGuardTime
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActiveWait
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetWaitingTime
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInterrupt_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfePower
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeSetVoltage
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeSelect
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInit
</UL>

<P><STRONG><a name="[a3]"></a>OSWrapper_WriteReg_nodelay</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, oswrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSWrapper_WriteReg_nodelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInterrupt_Handler
</UL>

<P><STRONG><a name="[9b]"></a>OSWrapper_ReadReg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oswrapper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIoctl
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActivate
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInterrupt_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReceive
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartStop
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActiveWait
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInterrupt_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeGetCardStatus
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfePower
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeSetVoltage
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeSelect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInit
</UL>

<P><STRONG><a name="[86]"></a>OSWrapper_RegisterIRQ</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, oswrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OSWrapper_RegisterIRQ &rArr; mml_intc_setup_irq &rArr; mml_intc_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_setup_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInit
</UL>

<P><STRONG><a name="[87]"></a>OSWrapper_UnregisterIRQ</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, oswrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_intc_detach_irq
</UL>

<P><STRONG><a name="[7d]"></a>OSWrapper_getUARTbyId</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, oswrapper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRegisterAfe
</UL>

<P><STRONG><a name="[7e]"></a>OSWrapper_getSlotbyId</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, oswrapper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRegisterAfe
</UL>

<P><STRONG><a name="[7c]"></a>OSWrapper_getSlotCtxbyId</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, oswrapper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccActivate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccExchange
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRegisterAfe
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSlotGetConfiguration
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_read
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_open
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_ioctl
</UL>

<P><STRONG><a name="[79]"></a>OSWrapper_RegisterUART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oswrapper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccUartRegister
</UL>

<P><STRONG><a name="[7b]"></a>OSWrapper_RegisterSlot</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oswrapper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRegisterAfe
</UL>

<P><STRONG><a name="[82]"></a>OSWrapper_memdestroy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, oswrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSWrapper_memdestroy
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT0
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccExchange
</UL>

<P><STRONG><a name="[e1]"></a>OSWrapper_EnterCritical</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oswrapper.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>OSWrapper_ExitCritical</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oswrapper.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>OSWrapper_Interrupt_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oswrapper.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>OSWrapper_Interrupt_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oswrapper.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>T0GetMoreRxBytes</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, protocolt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = T0GetMoreRxBytes &rArr; IccGetRxLen
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccGetRxLen
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccCheckCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case2
</UL>

<P><STRONG><a name="[89]"></a>T0TransmitHeader</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, protocolt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = T0TransmitHeader &rArr; IccSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSend
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case2
</UL>

<P><STRONG><a name="[8b]"></a>T0GetProcByte</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, protocolt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = T0GetProcByte &rArr; IccReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccReceive
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccGetRxLen
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccCheckCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case2
</UL>

<P><STRONG><a name="[8d]"></a>T0Case2</STRONG> (Thumb, 750 bytes, Stack size 80 bytes, protocolt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = T0Case2 &rArr; T0GetMoreRxBytes &rArr; IccGetRxLen
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSend
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRxDone
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccDeactivate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetProcByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0TransmitHeader
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetMoreRxBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT0
</UL>

<P><STRONG><a name="[8e]"></a>T0Case3</STRONG> (Thumb, 466 bytes, Stack size 80 bytes, protocolt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = T0Case3 &rArr; T0GetMoreRxBytes &rArr; IccGetRxLen
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSend
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRxDone
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccDeactivate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetProcByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0TransmitHeader
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetMoreRxBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT0
</UL>

<P><STRONG><a name="[8f]"></a>T0Case1</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, protocolt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = T0Case1 &rArr; T0GetMoreRxBytes &rArr; IccGetRxLen
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRxDone
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetProcByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0TransmitHeader
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0GetMoreRxBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT0
</UL>

<P><STRONG><a name="[90]"></a>T0DetectCmdCase</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, protocolt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T0DetectCmdCase
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT0
</UL>

<P><STRONG><a name="[81]"></a>SendT0</STRONG> (Thumb, 618 bytes, Stack size 120 bytes, protocolt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SendT0 &rArr; T0Case3 &rArr; T0GetMoreRxBytes &rArr; IccGetRxLen
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_memdestroy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSlotGetConfiguration
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccDeactivate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0DetectCmdCase
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0Case2
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccExchange
</UL>

<P><STRONG><a name="[80]"></a>SendT1</STRONG> (Thumb, 2426 bytes, Stack size 120 bytes, protocolt1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SendT1 &rArr; ReceiveBlock &rArr; IccReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSlotGetConfiguration
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccDeactivate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSBlock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRBlock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIBlock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveBlock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCBValueRBlock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCBValueIBlock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccExchange
</UL>

<P><STRONG><a name="[94]"></a>PCBValueIBlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, protocolt1_blockmgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIBlock
</UL>

<P><STRONG><a name="[93]"></a>PCBValueRBlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, protocolt1_blockmgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRBlock
</UL>

<P><STRONG><a name="[92]"></a>SendIBlock</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, protocolt1_blockmgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendIBlock &rArr; IccSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSend
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCBValueIBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT1
</UL>

<P><STRONG><a name="[97]"></a>SendRBlock</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, protocolt1_blockmgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendRBlock &rArr; IccSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSend
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCBValueRBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT1
</UL>

<P><STRONG><a name="[91]"></a>SendSBlock</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, protocolt1_blockmgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendSBlock &rArr; IccSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSend
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT1
</UL>

<P><STRONG><a name="[95]"></a>ReceiveBlock</STRONG> (Thumb, 974 bytes, Stack size 56 bytes, protocolt1_blockmgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReceiveBlock &rArr; IccReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccReceive
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRxDone
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccGetRxLen
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccCheckCardState
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT1
</UL>

<P><STRONG><a name="[96]"></a>CheckMBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, protocolt1_blockmgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT1
</UL>

<P><STRONG><a name="[73]"></a>IccPTSNegotiate</STRONG> (Thumb, 618 bytes, Stack size 72 bytes, pts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IccPTSNegotiate &rArr; IccSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccReceive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSend
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSlotGetConfiguration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRxDone
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccGetRxLen
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccCheckCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetATR
</UL>

<P><STRONG><a name="[33]"></a>SCAPI_open</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, smartcard_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SCAPI_open &rArr; AfeInit &rArr; mml_gpio_init &rArr; mml_gpio_set_config &rArr; mml_gpio_pad_configure &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_getSlotCtxbyId
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>SCAPI_close</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, smartcard_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>SCAPI_write</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, smartcard_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SCAPI_write &rArr; IccExchange &rArr; SendT0 &rArr; T0Case3 &rArr; T0GetMoreRxBytes &rArr; IccGetRxLen
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_getSlotCtxbyId
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccExchange
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccCheckCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>SCAPI_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, smartcard_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCAPI_read
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_getSlotCtxbyId
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>SCAPI_ioctl</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, smartcard_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SCAPI_ioctl &rArr; IccActivate &rArr; GetATR &rArr; IccPTSNegotiate &rArr; IccSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_getSlotCtxbyId
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccActivate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPowerAfe
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSetAfeVoltage
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccCheckCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>AfeInit</STRONG> (Thumb, 574 bytes, Stack size 48 bytes, max3255x_afe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = AfeInit &rArr; mml_gpio_init &rArr; mml_gpio_set_config &rArr; mml_gpio_pad_configure &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_RegisterIRQ
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccRegisterAfe
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_write_bit_pattern
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_open
</UL>

<P><STRONG><a name="[1f]"></a>UartIoctl</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UartIoctl &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max325xx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>UartInit</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UartInit &rArr; OSWrapper_RegisterIRQ &rArr; mml_intc_setup_irq &rArr; mml_intc_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_RegisterIRQ
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_Map
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccUartRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_open
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_long
</UL>

<P><STRONG><a name="[e5]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultConfig
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAPI_read
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIBlock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveBlock
</UL>

<P><STRONG><a name="[a5]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[e6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_memdestroy
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ea]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[ee]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2a]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f2]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>IccSlotGetConfiguration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iccabstract.o(i.IccSlotGetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IccSlotGetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_getSlotCtxbyId
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendT0
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPTSNegotiate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetATR
</UL>

<P><STRONG><a name="[f5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14]"></a>AfeSelect</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, max3255x_afe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AfeSelect &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max3255x_afe.o(.constdata)
</UL>
<P><STRONG><a name="[15]"></a>AfeSetVoltage</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, max3255x_afe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AfeSetVoltage &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max3255x_afe.o(.constdata)
</UL>
<P><STRONG><a name="[16]"></a>AfePower</STRONG> (Thumb, 656 bytes, Stack size 48 bytes, max3255x_afe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AfePower &rArr; mml_gpio_read_bit_pattern &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccWait
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_read_bit_pattern
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_write_bit_pattern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max3255x_afe.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>AfeGetCardStatus</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, max3255x_afe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AfeGetCardStatus &rArr; mml_gpio_read_bit_pattern &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mml_gpio_read_bit_pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeInterrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max3255x_afe.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>AfeInterrupt_Handler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, max3255x_afe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AfeInterrupt_Handler &rArr; AfeGetCardStatus &rArr; mml_gpio_read_bit_pattern &rArr; mml_gpio_check
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccOnCardStateChange
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfeGetCardStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max3255x_afe.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>UartSetWaitingTime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UartSetWaitingTime &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActivate
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInterrupt_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActiveWait
</UL>

<P><STRONG><a name="[1e]"></a>UartActiveWait</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UartActiveWait &rArr; UartSetWaitingTime &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccCheckCardState
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetWaitingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActivate
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInterrupt_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max325xx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>UartSetGuardTime</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UartSetGuardTime &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReceive
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetConfig
</UL>

<P><STRONG><a name="[a0]"></a>UartSetETU</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UartSetETU &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetConfig
</UL>

<P><STRONG><a name="[a1]"></a>UartSetConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UartSetConfig &rArr; UartSetETU &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetETU
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetGuardTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActivate
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
</UL>

<P><STRONG><a name="[a2]"></a>UartComputeEDC</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UartComputeEDC
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartStop
</UL>

<P><STRONG><a name="[1c]"></a>UartStop</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UartStop &rArr; IccPowerOff &rArr; SetDefaultConfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPowerOff
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComputeEDC
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInterrupt_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartOnCardStateChanged
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max325xx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[18]"></a>UartOnCardStateChanged</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UartOnCardStateChanged &rArr; UartStop &rArr; IccPowerOff &rArr; SetDefaultConfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max325xx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[19]"></a>UartReceive</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UartReceive &rArr; UartSetGuardTime &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetGuardTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActivate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max325xx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>UartGetRxLen</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartGetRxLen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max325xx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[1a]"></a>UartSend</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UartSend &rArr; UartActiveWait &rArr; UartSetWaitingTime &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComputeEDC
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetGuardTime
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActiveWait
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetWaitingTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max325xx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[13]"></a>UartInterrupt_Handler</STRONG> (Thumb, 982 bytes, Stack size 56 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UartInterrupt_Handler &rArr; UartStop &rArr; IccPowerOff &rArr; SetDefaultConfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg_nodelay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPowerOff
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartStop
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActiveWait
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetWaitingTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max325xx_uart.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>UartActivate</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, max325xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UartActivate &rArr; UartReceive &rArr; UartSetGuardTime &rArr; OSWrapper_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWrapper_WriteReg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccPowerAfe
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccSetAfeVoltage
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IccCheckCardState
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReceive
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetConfig
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartActiveWait
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetWaitingTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> max325xx_uart.o(.constdata)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
